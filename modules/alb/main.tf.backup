resource "aws_lb" "alb" {
  name               = "${var.resource_prefix}${var.load_balancer_type}-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = aws_security_group.alb_sg.id
  subnets            = var.public_subnet_ids

  enable_deletion_protection = false

  tags = {
    Environment = var.env_name
    Name        = "${var.resource_prefix}${var.load_balancer_type}-alb"
  }
}

resource "aws_security_group" "alb_sg" {
  name        = "${var.resource_prefix}-alb-sg"
  description = "Allow traffic from ALB to EC2 instances"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]  # Allow all incoming HTTP traffic
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "${var.resource_prefix}-alb-sg"
  }
}

resource "aws_lb_target_group" "main" {
  name        = "${var.resource_prefix}-main-tg"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"

  health_check {
    interval            = 6
    path                = "/index.html"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
  }

  tags = {
    Name = "${var.resource_prefix}-main-tg"
  }
}

resource "aws_lb_target_group" "admin" {
  name        = "${var.resource_prefix}-admin-tg"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"

  health_check {
    interval            = 6
    path                = "/index.html"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
  }

  tags = {
    Name = "${var.resource_prefix}-admin-tg"
  }
}

resource "aws_lb_target_group" "register" {
  name        = "${var.resource_prefix}-register-tg"
  port        = 80
  protocol    = "HTTP"
  vpc_id      = var.vpc_id
  target_type = "instance"

  health_check {
    interval            = 6
    path                = "/index.html"
    port                = "traffic-port"
    protocol            = "HTTP"
    timeout             = 5
    healthy_threshold   = 3
    unhealthy_threshold = 3
  }

  tags = {
    Name = "${var.resource_prefix}-register-tg"
  }
}

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.main.arn
  }
}

resource "aws_lb_listener_rule" "register_rule" {
  listener_arn = aws_lb_listener.http.arn

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.register.arn
  }

  conditions {
    field  = "path-pattern"
    values = ["/register*", "/register/*"]
  }
}

resource "aws_lb_listener_rule" "admin_rule" {
  listener_arn = aws_lb_listener.http.arn

  action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.admin.arn
  }

  conditions {
    field  = "path-pattern"
    values = ["/admin*", "/admin/*"]
  }
}

resource "aws_lb_target_group_attachment" "main_attachment" {
  for_each         = var.main_instance_ids
  target_group_arn = aws_lb_target_group.main.arn
  target_id        = each.value
  port             = 80
}

resource "aws_lb_target_group_attachment" "admin_attachment" {
  for_each         = var.admin_instance_ids
  target_group_arn = aws_lb_target_group.admin.arn
  target_id        = each.value
  port             = 80
}

resource "aws_lb_target_group_attachment" "register_attachment" {
  for_each         = var.register_instance_ids
  target_group_arn = aws_lb_target_group.register.arn
  target_id        = each.value
  port             = 80
}

